import pygameimport timeclass Vector:    x=None    y=None    def __init__(self, x, y):        self.x = x        self.y = yclass Portal:    x1=None    y1=None    x2=None    y2=None    x3=None    y3=None    x4=None    y4=None    def __init__(self, x1, y1, x2, y2, x3, y3, x4, y4):        self.x1=x1        self.y1=y1        self.x2=x2        self.y2=y2        self.x3=x3        self.y3=y3        self.x4=x4        self.y4=y4#game settingsWIDTH = 640HEIGHT = 480FRAME_RATE = int(1000/25)MAP_WIDTH = 20MAP_HEIGHT = 10TILE_WIDTH = 50TILE_HEIGHT = 50JUMP_HEIGHT = 15GROUND_MOVEMENT_SPEED = 0.5AIR_MOVEMENT_FACTOR = 0.75MOVEMENT_SPEED_LIMIT = 10SLIDE_SPEED_LOWER_BOUND = 4GRAVITY = 1SLIDING_FRICTION = 0.75FRICTION = 0.5PLAYER_LEFT_BOUND = 100PLAYER_RIGHT_BOUND = WIDTH-100CAMERA_LEFT_BOUND = WIDTH/2CAMERA_RIGHT_BOUND = (MAP_WIDTH*TILE_WIDTH)-WIDTH/2map = [[True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True],        [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False],        [False, False, False, False, False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False],        [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False],        [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False],        [False, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, True, False, False, False],        [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False],        [False, False, False, False, False, False, False, False, False, True, False, False, True, False, False, False, False, False, False, False],        [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False],        [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]]portals = [Portal(200, 450, 250, 450, 200, 50, 250, 50)]pygame.init()win = pygame.display.set_mode((WIDTH, HEIGHT))pygame.display.set_caption("xxPlatformer")running = True#player settingspx = WIDTH/2py = HEIGHT/2pwidth = 25pheight = 50movementVector = Vector(0, 0)grounded=Falsesliding=FalseisRightBound=FalseisLeftBound=FalseinPortalBelow=False#camera starting poscx = WIDTH/2cy = HEIGHT/2keypressed=Falsewhile running:    keypressed=False    pygame.time.delay(FRAME_RATE)    win.fill([0, 0, 0])    for event in pygame.event.get():        if event.type == pygame.QUIT:            running=False    keys = pygame.key.get_pressed()        #jump logic    if keys[pygame.K_w] and grounded:        movementVector.y=-JUMP_HEIGHT        grounded=False        #basic lateral movement
    if keys[pygame.K_a]:        keypressed=True        sliding = False        if movementVector.x>-MOVEMENT_SPEED_LIMIT:            if not grounded:                movementVector.x-=AIR_MOVEMENT_FACTOR*GROUND_MOVEMENT_SPEED            else:                movementVector.x-=GROUND_MOVEMENT_SPEED
    if keys[pygame.K_d]:        keypressed=True        sliding = False        if movementVector.x<MOVEMENT_SPEED_LIMIT:            if not grounded:                movementVector.x+=AIR_MOVEMENT_FACTOR*GROUND_MOVEMENT_SPEED            else:                movementVector.x+=GROUND_MOVEMENT_SPEED    #todo: left and right collision and wall jump test    #collision detection    scaledpxright=(px+pwidth)/TILE_WIDTH    scaledpxmid=(px+pwidth/2)/TILE_WIDTH    scaledpxleft=(px)/TILE_WIDTH    scaledpylower=(py+pheight)/TILE_HEIGHT    scaledpymid=(py+pheight/2)/TILE_HEIGHT    scaledpyupper=(py)/TILE_HEIGHT    pxright=px+pwidth    pxmid=px+pwidth/2    pxleft=px    pylower=py+pheight    pymid=py+pheight/2    pyupper=py    if not inPortalBelow:        for portal in portals:            if abs(pylower-portal.y1)<=10:                if (pxleft>portal.x1 and pxright<portal.x2) or (pxleft>portal.x3 and pxright<portal.x4):                    grounded=False                    movementVector.x=0                    inPortalBelow=True        if map[int(scaledpylower)][int(scaledpxright)] or map[int(scaledpylower)][int(scaledpxleft)] or map[int(scaledpylower)][int(scaledpxmid)]:            if movementVector.y>0:                    movementVector.y=0                    py = (int(scaledpylower)*TILE_HEIGHT)-pheight                    grounded=True        else:            grounded=False        if map[int(scaledpyupper)][int(scaledpxright)] or map[int(scaledpyupper)][int(scaledpxleft)] or map[int(scaledpyupper)][int(scaledpxmid)]:            if movementVector.y<0:                py = (int(scaledpyupper)*TILE_HEIGHT)+TILE_HEIGHT                movementVector.y=0        scaledpylower-=0.1        scaledpyupper+=0.1        if map[int(scaledpyupper)][int(scaledpxright)] or map[int(scaledpymid)][int(scaledpxright)] or map[int(scaledpylower)][int(scaledpxright)]:            if movementVector.x>0:                px = (int(scaledpxright)*TILE_WIDTH)-pwidth                movementVector.x=0        if map[int(scaledpyupper)][int(scaledpxleft)] or map[int(scaledpymid)][int(scaledpxleft)] or map[int(scaledpylower)][int(scaledpxleft)]:            if movementVector.x<0:                px = (int(scaledpxright)*TILE_WIDTH)                movementVector.x=0    else:        if pyupper-portal.y1>0:            py=portal.y3            px=(px-portal.x1)+portal.x3            inPortalBelow=False    #basic slide logic    if keys[pygame.K_s] and not keypressed:        sliding=True    elif movementVector.x<=SLIDE_SPEED_LOWER_BOUND and movementVector.x>=-SLIDE_SPEED_LOWER_BOUND:        sliding=False    #keeps player in the bounds of the map    if (px+movementVector.x-0.5)/TILE_WIDTH<0 or (px+movementVector.x+0.5)/TILE_WIDTH>MAP_WIDTH-1:        movementVector.x=0    else:           px+=movementVector.x    py+=movementVector.y        #GRAVITY    if not grounded:        movementVector.y+=GRAVITY    #most of the lateral GRAVITY/FRICTION calculations    if grounded:        if sliding:            if movementVector.x>0:                movementVector.x-=SLIDING_FRICTION            elif movementVector.x<0:                movementVector.x+=SLIDING_FRICTION        elif not keypressed:            movementVector.x = movementVector.x*FRICTION    #keeps the movement vector from being an insignificantly small number and helps with ease of calculations    if movementVector.x<0.5 and movementVector.x>-0.5:        movementVector.x=0        sliding=False    #determine whether player is on the right, left or middle of the screen    if px-cx>=(WIDTH/2)-100:        isRightBound = True        cx += px-(cx+(WIDTH/2)-100)    else:        isRightBound = False    if px-cx<=-((WIDTH/2)-100):        isLeftBound = True        cx += px-cx+((WIDTH/2)-100)    else:        isLeftBound = False    #why is the background moving in the wrong direction???    #drawing the background    for x in range(int((WIDTH+WIDTH%TILE_WIDTH)/TILE_WIDTH)):        for y in range(int((HEIGHT+HEIGHT%TILE_HEIGHT)/TILE_HEIGHT)):            xpos=(cx%TILE_WIDTH)+TILE_WIDTH*x            ypos=(cy%TILE_HEIGHT)+TILE_HEIGHT*y            if x==0:                pygame.draw.rect(win, (0, 0, 255), (0, ypos, xpos, TILE_HEIGHT))            pygame.draw.rect(win, (0, 0, 255), (xpos, ypos, TILE_WIDTH, TILE_HEIGHT))            pygame.draw.rect(win, (125, 125, 255), (xpos+TILE_WIDTH*0.25, ypos+TILE_HEIGHT*0.25, TILE_WIDTH*0.5, TILE_HEIGHT*0.5))    #drawing the platforms    for y in range(MAP_HEIGHT):        for x in range(MAP_WIDTH):            if map[y][x] and abs(x*TILE_WIDTH-cx)<=WIDTH/2+TILE_WIDTH and abs(y*TILE_HEIGHT-cy)<=HEIGHT/2+TILE_HEIGHT:                pygame.draw.rect(win, (0, 255, 0), (WIDTH/2+(x*TILE_WIDTH-cx), HEIGHT/2+(y*TILE_HEIGHT-cy), TILE_WIDTH, TILE_HEIGHT))    for portal in portals:        pygame.draw.line(win, (255, 165, 0), (WIDTH/2+(portal.x1-cx), HEIGHT/2+(portal.y1-cy)), (WIDTH/2+(portal.x2-cx), HEIGHT/2+(portal.y2-cy)), 5)        pygame.draw.line(win, (0, 255, 255), (WIDTH/2+(portal.x3-cx), HEIGHT/2+(portal.y3-cy)), (WIDTH/2+(portal.x4-cx), HEIGHT/2+(portal.y4-cy)), 5)        #drawing the player    if isRightBound:        pygame.draw.rect(win, (220, 220, 25), (PLAYER_RIGHT_BOUND, py, pwidth, pheight))    elif isLeftBound:        pygame.draw.rect(win, (220, 220, 25), (PLAYER_LEFT_BOUND, py, pwidth, pheight))    else:        pygame.draw.rect(win, (220, 220, 25), ((WIDTH/2)+px-cx, py, pwidth, pheight))    pygame.display.update()